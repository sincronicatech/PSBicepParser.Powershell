//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class bicepParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TARGETSCOPE=1, PARAM=2, RESOURCE=3, MODULE=4, OUTPUT=5, EXISTING=6, STRING=7, 
		BOOL=8, INT=9, ARRAY=10, OBJECT=11, COLON=12, ET=13, OPENSQUARE=14, CLOSESQUARE=15, 
		OPENGRAPH=16, CLOSEGRAPH=17, SLASH=18, COMMA=19, OPENPARENTHESIS=20, CLOSEPARENTHESIS=21, 
		POINT=22, EQUAL=23, DOLLAR=24, BOOLEAN=25, NUMBER=26, IDENTIFIER=27, WS=28, 
		OPEN_STRING=29, ESCAPED_APEX=30, ESCAPED_DOLLAR=31, TEXT=32, CLOSE_STRING=33, 
		ENTER_INTERPOLATION=34;
	public const int
		RULE_bicep = 0, RULE_module = 1, RULE_output = 2, RULE_targetScope = 3, 
		RULE_scope = 4, RULE_param = 5, RULE_decorator = 6, RULE_identifier = 7, 
		RULE_type = 8, RULE_resource = 9, RULE_resourceType = 10, RULE_modulePath = 11, 
		RULE_value = 12, RULE_valueExpression = 13, RULE_variable = 14, RULE_function = 15, 
		RULE_functionParameter = 16, RULE_stringValue = 17, RULE_boolValue = 18, 
		RULE_numberValue = 19, RULE_arrayValue = 20, RULE_objectValue = 21, RULE_property = 22, 
		RULE_propertyName = 23;
	public static readonly string[] ruleNames = {
		"bicep", "module", "output", "targetScope", "scope", "param", "decorator", 
		"identifier", "type", "resource", "resourceType", "modulePath", "value", 
		"valueExpression", "variable", "function", "functionParameter", "stringValue", 
		"boolValue", "numberValue", "arrayValue", "objectValue", "property", "propertyName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'targetscope'", "'param'", "'resource'", "'module'", "'output'", 
		"'existing'", "'string'", "'bool'", "'int'", "'array'", "'object'", "':'", 
		"'@'", "'['", "']'", "'{'", "'}'", "'/'", "','", "'('", "')'", "'.'", 
		"'='", "'$'", null, null, null, null, null, "'\\''", "'\\$'", null, null, 
		"'${'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TARGETSCOPE", "PARAM", "RESOURCE", "MODULE", "OUTPUT", "EXISTING", 
		"STRING", "BOOL", "INT", "ARRAY", "OBJECT", "COLON", "ET", "OPENSQUARE", 
		"CLOSESQUARE", "OPENGRAPH", "CLOSEGRAPH", "SLASH", "COMMA", "OPENPARENTHESIS", 
		"CLOSEPARENTHESIS", "POINT", "EQUAL", "DOLLAR", "BOOLEAN", "NUMBER", "IDENTIFIER", 
		"WS", "OPEN_STRING", "ESCAPED_APEX", "ESCAPED_DOLLAR", "TEXT", "CLOSE_STRING", 
		"ENTER_INTERPOLATION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "bicepParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static bicepParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public bicepParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public bicepParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class BicepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetScopeContext targetScope() {
			return GetRuleContext<TargetScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext[] module() {
			return GetRuleContexts<ModuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module(int i) {
			return GetRuleContext<ModuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputContext[] output() {
			return GetRuleContexts<OutputContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputContext output(int i) {
			return GetRuleContext<OutputContext>(i);
		}
		public BicepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bicep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBicep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BicepContext bicep() {
		BicepContext _localctx = new BicepContext(Context, State);
		EnterRule(_localctx, 0, RULE_bicep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TARGETSCOPE) {
				{
				State = 48;
				targetScope();
				}
			}

			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 55;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RESOURCE:
					{
					State = 51;
					resource();
					}
					break;
				case PARAM:
				case ET:
					{
					State = 52;
					param();
					}
					break;
				case MODULE:
					{
					State = 53;
					module();
					}
					break;
				case OUTPUT:
					{
					State = 54;
					output();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PARAM) | (1L << RESOURCE) | (1L << MODULE) | (1L << OUTPUT) | (1L << ET))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(bicepParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModulePathContext modulePath() {
			return GetRuleContext<ModulePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(bicepParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectValueContext objectValue() {
			return GetRuleContext<ObjectValueContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(MODULE);
			State = 60;
			identifier();
			State = 61;
			modulePath();
			State = 62;
			Match(EQUAL);
			State = 63;
			objectValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT() { return GetToken(bicepParser.OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(bicepParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 4, RULE_output);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(OUTPUT);
			State = 66;
			identifier();
			State = 67;
			type();
			State = 68;
			Match(EQUAL);
			State = 69;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGETSCOPE() { return GetToken(bicepParser.TARGETSCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(bicepParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public TargetScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetScope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTargetScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetScopeContext targetScope() {
		TargetScopeContext _localctx = new TargetScopeContext(Context, State);
		EnterRule(_localctx, 6, RULE_targetScope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(TARGETSCOPE);
			State = 72;
			Match(EQUAL);
			State = 73;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 8, RULE_scope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(bicepParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext[] decorator() {
			return GetRuleContexts<DecoratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext decorator(int i) {
			return GetRuleContext<DecoratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(bicepParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 10, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ET) {
				{
				{
				State = 77;
				decorator();
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 83;
			Match(PARAM);
			State = 84;
			identifier();
			State = 85;
			type();
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 86;
				Match(EQUAL);
				State = 87;
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ET() { return GetToken(bicepParser.ET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		public DecoratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decorator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecorator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorContext decorator() {
		DecoratorContext _localctx = new DecoratorContext(Context, State);
		EnterRule(_localctx, 12, RULE_decorator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(ET);
			State = 91;
			valueExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(bicepParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(bicepParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(bicepParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(bicepParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(bicepParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(bicepParser.INT, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << BOOL) | (1L << INT) | (1L << ARRAY) | (1L << OBJECT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(bicepParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceTypeContext resourceType() {
			return GetRuleContext<ResourceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(bicepParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectValueContext objectValue() {
			return GetRuleContext<ObjectValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTING() { return GetToken(bicepParser.EXISTING, 0); }
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 18, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(RESOURCE);
			State = 98;
			identifier();
			State = 99;
			resourceType();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXISTING) {
				{
				State = 100;
				Match(EXISTING);
				}
			}

			State = 103;
			Match(EQUAL);
			State = 104;
			objectValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public ResourceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceTypeContext resourceType() {
		ResourceTypeContext _localctx = new ResourceTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_resourceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModulePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public ModulePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modulePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulePath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModulePathContext modulePath() {
		ModulePathContext _localctx = new ModulePathContext(Context, State);
		EnterRule(_localctx, 22, RULE_modulePath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			stringValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberValueContext numberValue() {
			return GetRuleContext<NumberValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolValueContext boolValue() {
			return GetRuleContext<BoolValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayValueContext arrayValue() {
			return GetRuleContext<ArrayValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectValueContext objectValue() {
			return GetRuleContext<ObjectValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_value);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110;
				valueExpression();
				}
				break;
			case OPEN_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111;
				stringValue();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112;
				numberValue();
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113;
				boolValue();
				}
				break;
			case OPENSQUARE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114;
				arrayValue();
				}
				break;
			case OPENGRAPH:
				EnterOuterAlt(_localctx, 6);
				{
				State = 115;
				objectValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(bicepParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueExpressionContext valueExpression() {
			return GetRuleContext<ValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueExpressionContext valueExpression() {
		ValueExpressionContext _localctx = new ValueExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_valueExpression);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				function();
				State = 119;
				Match(POINT);
				State = 120;
				valueExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				variable();
				State = 123;
				Match(POINT);
				State = 124;
				valueExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 126;
				function();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 127;
				variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(bicepParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQUARE() { return GetToken(bicepParser.OPENSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQUARE() { return GetToken(bicepParser.CLOSESQUARE, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 28, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(IDENTIFIER);
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 131;
				Match(OPENSQUARE);
				State = 132;
				value();
				State = 133;
				Match(CLOSESQUARE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(bicepParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENPARENTHESIS() { return GetToken(bicepParser.OPENPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEPARENTHESIS() { return GetToken(bicepParser.CLOSEPARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(bicepParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(bicepParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(IDENTIFIER);
			State = 138;
			Match(OPENPARENTHESIS);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPENSQUARE) | (1L << OPENGRAPH) | (1L << BOOLEAN) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << OPEN_STRING))) != 0)) {
				{
				{
				State = 139;
				functionParameter();
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 140;
					Match(COMMA);
					State = 141;
					functionParameter();
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 152;
			Match(CLOSEPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_STRING() { return GetToken(bicepParser.OPEN_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_STRING() { return GetToken(bicepParser.CLOSE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENTER_INTERPOLATION() { return GetTokens(bicepParser.ENTER_INTERPOLATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTER_INTERPOLATION(int i) {
			return GetToken(bicepParser.ENTER_INTERPOLATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSEGRAPH() { return GetTokens(bicepParser.CLOSEGRAPH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEGRAPH(int i) {
			return GetToken(bicepParser.CLOSEGRAPH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(bicepParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(bicepParser.TEXT, i);
		}
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 34, RULE_stringValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(OPEN_STRING);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT || _la==ENTER_INTERPOLATION) {
				{
				State = 162;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENTER_INTERPOLATION:
					{
					State = 157;
					Match(ENTER_INTERPOLATION);
					State = 158;
					value();
					State = 159;
					Match(CLOSEGRAPH);
					}
					break;
				case TEXT:
					{
					State = 161;
					Match(TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167;
			Match(CLOSE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(bicepParser.BOOLEAN, 0); }
		public BoolValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolValueContext boolValue() {
		BoolValueContext _localctx = new BoolValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_boolValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(bicepParser.NUMBER, 0); }
		public NumberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberValueContext numberValue() {
		NumberValueContext _localctx = new NumberValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_numberValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQUARE() { return GetToken(bicepParser.OPENSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQUARE() { return GetToken(bicepParser.CLOSESQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayValueContext arrayValue() {
		ArrayValueContext _localctx = new ArrayValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrayValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(OPENSQUARE);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 174;
				value();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPENSQUARE) | (1L << OPENGRAPH) | (1L << BOOLEAN) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << OPEN_STRING))) != 0) );
			State = 179;
			Match(CLOSESQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENGRAPH() { return GetToken(bicepParser.OPENGRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSEGRAPH() { return GetToken(bicepParser.CLOSEGRAPH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public ObjectValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValueContext objectValue() {
		ObjectValueContext _localctx = new ObjectValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_objectValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(OPENGRAPH);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 182;
				property();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENTIFIER || _la==OPEN_STRING );
			State = 187;
			Match(CLOSEGRAPH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(bicepParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 44, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			propertyName();
			State = 190;
			Match(COLON);
			State = 191;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(bicepParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IbicepParserVisitor<TResult> typedVisitor = visitor as IbicepParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 46, RULE_propertyName);
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				Match(IDENTIFIER);
				}
				break;
			case OPEN_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				stringValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,34,198,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,3,0,50,8,0,1,0,1,0,1,0,1,0,4,0,56,8,0,11,0,12,
		0,57,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		4,1,4,1,5,5,5,79,8,5,10,5,12,5,82,9,5,1,5,1,5,1,5,1,5,1,5,3,5,89,8,5,1,
		6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,3,9,102,8,9,1,9,1,9,1,9,1,10,
		1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,117,8,12,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,129,8,13,1,14,1,14,1,14,1,14,
		1,14,3,14,136,8,14,1,15,1,15,1,15,1,15,1,15,5,15,143,8,15,10,15,12,15,
		146,9,15,5,15,148,8,15,10,15,12,15,151,9,15,1,15,1,15,1,16,1,16,1,17,1,
		17,1,17,1,17,1,17,1,17,5,17,163,8,17,10,17,12,17,166,9,17,1,17,1,17,1,
		18,1,18,1,19,1,19,1,20,1,20,4,20,176,8,20,11,20,12,20,177,1,20,1,20,1,
		21,1,21,4,21,184,8,21,11,21,12,21,185,1,21,1,21,1,22,1,22,1,22,1,22,1,
		23,1,23,3,23,196,8,23,1,23,0,0,24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,0,1,1,0,7,11,197,0,49,1,0,0,0,2,59,1,0,0,
		0,4,65,1,0,0,0,6,71,1,0,0,0,8,75,1,0,0,0,10,80,1,0,0,0,12,90,1,0,0,0,14,
		93,1,0,0,0,16,95,1,0,0,0,18,97,1,0,0,0,20,106,1,0,0,0,22,108,1,0,0,0,24,
		116,1,0,0,0,26,128,1,0,0,0,28,130,1,0,0,0,30,137,1,0,0,0,32,154,1,0,0,
		0,34,156,1,0,0,0,36,169,1,0,0,0,38,171,1,0,0,0,40,173,1,0,0,0,42,181,1,
		0,0,0,44,189,1,0,0,0,46,195,1,0,0,0,48,50,3,6,3,0,49,48,1,0,0,0,49,50,
		1,0,0,0,50,55,1,0,0,0,51,56,3,18,9,0,52,56,3,10,5,0,53,56,3,2,1,0,54,56,
		3,4,2,0,55,51,1,0,0,0,55,52,1,0,0,0,55,53,1,0,0,0,55,54,1,0,0,0,56,57,
		1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,1,1,0,0,0,59,60,5,4,0,0,60,61,3,
		14,7,0,61,62,3,22,11,0,62,63,5,23,0,0,63,64,3,42,21,0,64,3,1,0,0,0,65,
		66,5,5,0,0,66,67,3,14,7,0,67,68,3,16,8,0,68,69,5,23,0,0,69,70,3,24,12,
		0,70,5,1,0,0,0,71,72,5,1,0,0,72,73,5,23,0,0,73,74,3,8,4,0,74,7,1,0,0,0,
		75,76,3,34,17,0,76,9,1,0,0,0,77,79,3,12,6,0,78,77,1,0,0,0,79,82,1,0,0,
		0,80,78,1,0,0,0,80,81,1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,84,5,2,0,
		0,84,85,3,14,7,0,85,88,3,16,8,0,86,87,5,23,0,0,87,89,3,24,12,0,88,86,1,
		0,0,0,88,89,1,0,0,0,89,11,1,0,0,0,90,91,5,13,0,0,91,92,3,26,13,0,92,13,
		1,0,0,0,93,94,5,27,0,0,94,15,1,0,0,0,95,96,7,0,0,0,96,17,1,0,0,0,97,98,
		5,3,0,0,98,99,3,14,7,0,99,101,3,20,10,0,100,102,5,6,0,0,101,100,1,0,0,
		0,101,102,1,0,0,0,102,103,1,0,0,0,103,104,5,23,0,0,104,105,3,42,21,0,105,
		19,1,0,0,0,106,107,3,34,17,0,107,21,1,0,0,0,108,109,3,34,17,0,109,23,1,
		0,0,0,110,117,3,26,13,0,111,117,3,34,17,0,112,117,3,38,19,0,113,117,3,
		36,18,0,114,117,3,40,20,0,115,117,3,42,21,0,116,110,1,0,0,0,116,111,1,
		0,0,0,116,112,1,0,0,0,116,113,1,0,0,0,116,114,1,0,0,0,116,115,1,0,0,0,
		117,25,1,0,0,0,118,119,3,30,15,0,119,120,5,22,0,0,120,121,3,26,13,0,121,
		129,1,0,0,0,122,123,3,28,14,0,123,124,5,22,0,0,124,125,3,26,13,0,125,129,
		1,0,0,0,126,129,3,30,15,0,127,129,3,28,14,0,128,118,1,0,0,0,128,122,1,
		0,0,0,128,126,1,0,0,0,128,127,1,0,0,0,129,27,1,0,0,0,130,135,5,27,0,0,
		131,132,5,14,0,0,132,133,3,24,12,0,133,134,5,15,0,0,134,136,1,0,0,0,135,
		131,1,0,0,0,135,136,1,0,0,0,136,29,1,0,0,0,137,138,5,27,0,0,138,149,5,
		20,0,0,139,144,3,32,16,0,140,141,5,19,0,0,141,143,3,32,16,0,142,140,1,
		0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,148,1,0,0,0,
		146,144,1,0,0,0,147,139,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,
		1,0,0,0,150,152,1,0,0,0,151,149,1,0,0,0,152,153,5,21,0,0,153,31,1,0,0,
		0,154,155,3,24,12,0,155,33,1,0,0,0,156,164,5,29,0,0,157,158,5,34,0,0,158,
		159,3,24,12,0,159,160,5,17,0,0,160,163,1,0,0,0,161,163,5,32,0,0,162,157,
		1,0,0,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,
		0,165,167,1,0,0,0,166,164,1,0,0,0,167,168,5,33,0,0,168,35,1,0,0,0,169,
		170,5,25,0,0,170,37,1,0,0,0,171,172,5,26,0,0,172,39,1,0,0,0,173,175,5,
		14,0,0,174,176,3,24,12,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,
		0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,5,15,0,0,180,41,1,0,0,0,181,
		183,5,16,0,0,182,184,3,44,22,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,
		1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,188,5,17,0,0,188,43,1,0,0,
		0,189,190,3,46,23,0,190,191,5,12,0,0,191,192,3,24,12,0,192,45,1,0,0,0,
		193,196,5,27,0,0,194,196,3,34,17,0,195,193,1,0,0,0,195,194,1,0,0,0,196,
		47,1,0,0,0,16,49,55,57,80,88,101,116,128,135,144,149,162,164,177,185,195
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
