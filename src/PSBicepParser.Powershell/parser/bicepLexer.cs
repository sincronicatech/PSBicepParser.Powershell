//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\DanieleFrancioni\OneDrive - Binarydea\Code\Sincronica\powershell-bicep-converter\src\BicepGrammar\bicepLexer.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class bicepLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TARGETSCOPE=1, PARAM=2, RESOURCE=3, MODULE=4, OUTPUT=5, EXISTING=6, STRING=7, 
		BOOL=8, INT=9, ARRAY=10, OBJECT=11, COLON=12, ET=13, OPENSQUARE=14, CLOSESQUARE=15, 
		OPENGRAPH=16, CLOSEGRAPH=17, SLASH=18, COMMA=19, OPENPARENTHESIS=20, CLOSEPARENTHESIS=21, 
		POINT=22, EQUAL=23, DOLLAR=24, BOOLEAN=25, NUMBER=26, IDENTIFIER=27, WS=28, 
		OPEN_STRING=29, ESCAPED_APEX=30, ESCAPED_DOLLAR=31, TEXT=32, CLOSE_STRING=33, 
		ENTER_INTERPOLATION=34;
	public const int
		STRINGMODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "STRINGMODE"
	};

	public static readonly string[] ruleNames = {
		"TARGETSCOPE", "PARAM", "RESOURCE", "MODULE", "OUTPUT", "EXISTING", "STRING", 
		"BOOL", "INT", "ARRAY", "OBJECT", "COLON", "ET", "OPENSQUARE", "CLOSESQUARE", 
		"OPENGRAPH", "CLOSEGRAPH", "SLASH", "COMMA", "OPENPARENTHESIS", "CLOSEPARENTHESIS", 
		"POINT", "EQUAL", "DOLLAR", "DIGIT", "BOOLEAN", "NUMBER", "IDENTIFIER", 
		"WS", "OPEN_STRING", "ESCAPED_APEX", "ESCAPED_DOLLAR", "TEXT", "CLOSE_STRING", 
		"ENTER_INTERPOLATION"
	};


	public bicepLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public bicepLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'targetscope'", "'param'", "'resource'", "'module'", "'output'", 
		"'existing'", "'string'", "'bool'", "'int'", "'array'", "'object'", "':'", 
		"'@'", "'['", "']'", "'{'", "'}'", "'/'", "','", "'('", "')'", "'.'", 
		"'='", "'$'", null, null, null, null, null, "'\\''", "'\\$'", null, null, 
		"'${'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TARGETSCOPE", "PARAM", "RESOURCE", "MODULE", "OUTPUT", "EXISTING", 
		"STRING", "BOOL", "INT", "ARRAY", "OBJECT", "COLON", "ET", "OPENSQUARE", 
		"CLOSESQUARE", "OPENGRAPH", "CLOSEGRAPH", "SLASH", "COMMA", "OPENPARENTHESIS", 
		"CLOSEPARENTHESIS", "POINT", "EQUAL", "DOLLAR", "BOOLEAN", "NUMBER", "IDENTIFIER", 
		"WS", "OPEN_STRING", "ESCAPED_APEX", "ESCAPED_DOLLAR", "TEXT", "CLOSE_STRING", 
		"ENTER_INTERPOLATION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "bicepLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static bicepLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,34,239,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
		1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
		1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
		13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,
		18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,193,8,25,1,26,4,26,196,8,26,
		11,26,12,26,197,1,27,1,27,5,27,202,8,27,10,27,12,27,205,9,27,1,28,4,28,
		208,8,28,11,28,12,28,209,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
		1,31,1,31,1,31,1,32,1,32,1,32,4,32,227,8,32,11,32,12,32,228,1,33,1,33,
		1,33,1,33,1,34,1,34,1,34,1,34,1,34,0,0,35,2,1,4,2,6,3,8,4,10,5,12,6,14,
		7,16,8,18,9,20,10,22,11,24,12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,
		40,20,42,21,44,22,46,23,48,24,50,0,52,25,54,26,56,27,58,28,60,29,62,30,
		64,31,66,32,68,33,70,34,2,0,1,5,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,
		57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,36,36,39,39,243,0,2,1,0,
		0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,
		1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,
		0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,
		1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,
		0,0,48,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,
		1,0,0,0,1,62,1,0,0,0,1,64,1,0,0,0,1,66,1,0,0,0,1,68,1,0,0,0,1,70,1,0,0,
		0,2,72,1,0,0,0,4,84,1,0,0,0,6,90,1,0,0,0,8,99,1,0,0,0,10,106,1,0,0,0,12,
		113,1,0,0,0,14,122,1,0,0,0,16,129,1,0,0,0,18,134,1,0,0,0,20,138,1,0,0,
		0,22,144,1,0,0,0,24,151,1,0,0,0,26,153,1,0,0,0,28,155,1,0,0,0,30,157,1,
		0,0,0,32,159,1,0,0,0,34,163,1,0,0,0,36,167,1,0,0,0,38,169,1,0,0,0,40,171,
		1,0,0,0,42,173,1,0,0,0,44,175,1,0,0,0,46,177,1,0,0,0,48,179,1,0,0,0,50,
		181,1,0,0,0,52,192,1,0,0,0,54,195,1,0,0,0,56,199,1,0,0,0,58,207,1,0,0,
		0,60,213,1,0,0,0,62,217,1,0,0,0,64,220,1,0,0,0,66,226,1,0,0,0,68,230,1,
		0,0,0,70,234,1,0,0,0,72,73,5,116,0,0,73,74,5,97,0,0,74,75,5,114,0,0,75,
		76,5,103,0,0,76,77,5,101,0,0,77,78,5,116,0,0,78,79,5,115,0,0,79,80,5,99,
		0,0,80,81,5,111,0,0,81,82,5,112,0,0,82,83,5,101,0,0,83,3,1,0,0,0,84,85,
		5,112,0,0,85,86,5,97,0,0,86,87,5,114,0,0,87,88,5,97,0,0,88,89,5,109,0,
		0,89,5,1,0,0,0,90,91,5,114,0,0,91,92,5,101,0,0,92,93,5,115,0,0,93,94,5,
		111,0,0,94,95,5,117,0,0,95,96,5,114,0,0,96,97,5,99,0,0,97,98,5,101,0,0,
		98,7,1,0,0,0,99,100,5,109,0,0,100,101,5,111,0,0,101,102,5,100,0,0,102,
		103,5,117,0,0,103,104,5,108,0,0,104,105,5,101,0,0,105,9,1,0,0,0,106,107,
		5,111,0,0,107,108,5,117,0,0,108,109,5,116,0,0,109,110,5,112,0,0,110,111,
		5,117,0,0,111,112,5,116,0,0,112,11,1,0,0,0,113,114,5,101,0,0,114,115,5,
		120,0,0,115,116,5,105,0,0,116,117,5,115,0,0,117,118,5,116,0,0,118,119,
		5,105,0,0,119,120,5,110,0,0,120,121,5,103,0,0,121,13,1,0,0,0,122,123,5,
		115,0,0,123,124,5,116,0,0,124,125,5,114,0,0,125,126,5,105,0,0,126,127,
		5,110,0,0,127,128,5,103,0,0,128,15,1,0,0,0,129,130,5,98,0,0,130,131,5,
		111,0,0,131,132,5,111,0,0,132,133,5,108,0,0,133,17,1,0,0,0,134,135,5,105,
		0,0,135,136,5,110,0,0,136,137,5,116,0,0,137,19,1,0,0,0,138,139,5,97,0,
		0,139,140,5,114,0,0,140,141,5,114,0,0,141,142,5,97,0,0,142,143,5,121,0,
		0,143,21,1,0,0,0,144,145,5,111,0,0,145,146,5,98,0,0,146,147,5,106,0,0,
		147,148,5,101,0,0,148,149,5,99,0,0,149,150,5,116,0,0,150,23,1,0,0,0,151,
		152,5,58,0,0,152,25,1,0,0,0,153,154,5,64,0,0,154,27,1,0,0,0,155,156,5,
		91,0,0,156,29,1,0,0,0,157,158,5,93,0,0,158,31,1,0,0,0,159,160,5,123,0,
		0,160,161,1,0,0,0,161,162,6,15,0,0,162,33,1,0,0,0,163,164,5,125,0,0,164,
		165,1,0,0,0,165,166,6,16,1,0,166,35,1,0,0,0,167,168,5,47,0,0,168,37,1,
		0,0,0,169,170,5,44,0,0,170,39,1,0,0,0,171,172,5,40,0,0,172,41,1,0,0,0,
		173,174,5,41,0,0,174,43,1,0,0,0,175,176,5,46,0,0,176,45,1,0,0,0,177,178,
		5,61,0,0,178,47,1,0,0,0,179,180,5,36,0,0,180,49,1,0,0,0,181,182,7,0,0,
		0,182,51,1,0,0,0,183,184,5,116,0,0,184,185,5,114,0,0,185,186,5,117,0,0,
		186,193,5,101,0,0,187,188,5,102,0,0,188,189,5,97,0,0,189,190,5,108,0,0,
		190,191,5,115,0,0,191,193,5,101,0,0,192,183,1,0,0,0,192,187,1,0,0,0,193,
		53,1,0,0,0,194,196,3,50,24,0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,1,
		0,0,0,197,198,1,0,0,0,198,55,1,0,0,0,199,203,7,1,0,0,200,202,7,2,0,0,201,
		200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,57,1,0,
		0,0,205,203,1,0,0,0,206,208,7,3,0,0,207,206,1,0,0,0,208,209,1,0,0,0,209,
		207,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,211,212,6,28,2,0,212,59,1,
		0,0,0,213,214,5,39,0,0,214,215,1,0,0,0,215,216,6,29,3,0,216,61,1,0,0,0,
		217,218,5,92,0,0,218,219,5,39,0,0,219,63,1,0,0,0,220,221,5,92,0,0,221,
		222,5,36,0,0,222,65,1,0,0,0,223,227,8,4,0,0,224,227,3,62,30,0,225,227,
		3,64,31,0,226,223,1,0,0,0,226,224,1,0,0,0,226,225,1,0,0,0,227,228,1,0,
		0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,67,1,0,0,0,230,231,5,39,0,0,231,
		232,1,0,0,0,232,233,6,33,1,0,233,69,1,0,0,0,234,235,5,36,0,0,235,236,5,
		123,0,0,236,237,1,0,0,0,237,238,6,34,0,0,238,71,1,0,0,0,8,0,1,192,197,
		203,209,226,228,4,5,0,0,4,0,0,6,0,0,5,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
